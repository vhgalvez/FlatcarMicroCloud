#!/usr/sbin/nft -f

# Limpiar el conjunto de reglas actual
flush ruleset

# ---------------------- Tabla de filtrado ----------------------
table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;

        # Log de tráfico entrante (opcional)
        log prefix "nftables-input-log: " group 1 accept

        # Tráfico seguro
        ct state established,related accept
        iif "lo" accept
        ip protocol icmp accept

        # Tráfico explícito al host (VIP, Load Balancer, etc.)
        ip daddr 192.168.0.30 tcp dport { 80, 443, 8080, 8443 } accept

        # Puertos TCP permitidos
        tcp dport {
            22, 80, 443, 8080, 8443,
            3389,
            6443,
            8081, 8082, 9090, 9091, 9093, 9100, 3000,
            32000-32767
        } accept

        # VIP explícito de Kubernetes y ingress controller
        ip daddr 10.17.5.10 tcp dport 6443 accept
        ip daddr 10.17.5.30 tcp dport { 80, 443 }

        # NTP
        udp dport 123 accept

        # Tráfico desde bridges de libvirt y puente LAN
        iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        log prefix "nftables-forward-log: " group 1 accept

        ct state established,related accept

        # Comunicación interna del clúster
        ip saddr 10.17.0.0/16 ip daddr 10.17.0.0/16 accept

        # Comunicación explícita
        ip saddr 10.17.5.10 ip daddr 10.17.5.30 tcp dport { 80, 445 } accept

        # Bridges virtuales
        iifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } oifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } accept
        oifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } iifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } accept

        # VIP explícito de Kubernetes y ingress controller
        ip daddr 10.17.5.10 tcp dport 6443 accept
        ip daddr 10.17.5.30 tcp dport { 80, 443 }

        # Salida de VMs a Internet
        iifname { "virbr_kube02", "virbr_kube03", "br0" } oifname "enp3s0f0" accept
    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

# ---------------------- Tabla de NAT para acceso a Internet ----------------------
table inet nat {
    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        ip saddr 10.17.3.0/24 oifname "enp3s0f0" masquerade
        ip saddr 10.17.4.0/24 oifname "enp3s0f0" masquerade
        ip saddr 192.168.0.0/24 oifname "enp3s0f0" masquerade
    }
}

# ---------------------- Tabla dummy para libvirt (sin hooks) ----------------------
table ip libvirt_network {
    chain forward {
        counter accept
    }

    chain guest_output {
        counter accept
    }
}
