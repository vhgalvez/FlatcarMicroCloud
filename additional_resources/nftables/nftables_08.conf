#!/usr/sbin/nft -f

# ============================== #
# 🔁 Limpiar reglas actuales
# ============================== #
flush ruleset

# ============================== #
# 🔒 Tabla de FILTRADO (inet)
# ============================== #
table inet filter {
  chain input {
    type filter hook input priority 0; policy drop;

    # 📌 Logging (opcional)
    log prefix "nftables-input-log: " group 1 accept

    #  Tráfico permitido básico
    ct state established,related accept
    iif "lo" accept
    ip protocol icmp accept

    #  Acceso directo al host físico (VIP en br0)
    ip daddr 192.168.0.30 tcp dport { 80, 443, 8080, 8443 } accept

    #  Permitir acceso desde todas las redes internas hacia 192.168.0.30
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 10.17.5.0/24 } ip daddr 192.168.0.30 accept

    #  Puertos abiertos generales (paneles, métricas, etc.)
    tcp dport {
      22, 80, 443, 8080, 8443,
      3389,
      6443,
      8081, 8082, 9090, 9091, 9093, 9100,
      3000,
      32000-32767
    } accept

    #  Acceso a VIPs (API Kubernetes e Ingress)
    ip daddr 10.17.5.10 tcp dport 6443 accept
    ip daddr 10.17.5.30 tcp dport { 80, 443 } accept

    #  NTP (hora)
    udp dport 123 accept

    #  Tráfico desde bridges virtuales (libvirt)
    iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept
  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    log prefix "nftables-forward-log: " group 1 accept

    ct state established,related accept

    #  Comunicación libre entre nodos/pods (todo 10.17.x.x)
    ip saddr 10.17.0.0/16 ip daddr 10.17.0.0/16 accept

    #  Tráfico explícito entre VIPs (10.17.5.x)
    ip saddr 10.17.5.10 ip daddr 10.17.5.30 tcp dport { 80, 445 } accept

    #  Respuestas desde nodos hacia VIP API
    ip saddr { 10.17.3.0/24, 10.17.4.0/24 } ip daddr 10.17.5.10 tcp sport 6443 accept

    #  Tráfico entrante hacia VIP API
    ip daddr 10.17.5.10 tcp dport 6443 accept

    #  Respuestas desde nodos hacia VIP Ingress
    ip saddr 10.17.4.0/24 ip daddr 10.17.5.30 tcp sport { 80, 443 } accept

    #  Tráfico entrante hacia VIP Ingress
    ip daddr 10.17.5.30 tcp dport { 80, 443 } accept

    #  Tráfico bidireccional en bridges virtuales (libvirt)
    iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } oifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept
    oifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept

    #  Salida de VMs a Internet
    iifname { "virbr_kube02", "virbr_kube03", "br0" } oifname "enp3s0f0" accept
  }

  chain output {
    type filter hook output priority 0; policy accept;
  }
}

# ============================== #
# 🌐 Tabla de NAT (salida a Internet)
# ============================== #
table inet nat {
  chain postrouting {
    type nat hook postrouting priority srcnat; policy accept;

    ip saddr 10.17.3.0/24 oifname "enp3s0f0" masquerade
    ip saddr 10.17.4.0/24 oifname "enp3s0f0" masquerade
    ip saddr 192.168.0.0/24 oifname "enp3s0f0" masquerade
  }
}

# ============================== #
# 🧪 Tabla dummy para libvirt (sin hooks)
# ============================== #
table ip libvirt_network {
  chain forward {
    counter accept
  }

  chain guest_output {
    counter accept
  }
}
