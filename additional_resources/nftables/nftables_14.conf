#!/usr/sbin/nft -f

flush ruleset

# =============================
# 🔒 FIREWALL - FILTRO DE PAQUETES
# =============================

table inet filter {
  chain input {
    type filter hook input priority 0; policy drop;

    # ✅ Conexiones establecidas o relacionadas
    ct state established,related accept

    # 🔁 Loopback
    iif "lo" accept

    # 🌐 ICMP (ping)
    ip protocol icmp accept

    # 🌐 DNS: resolver externo y local (UDP/TCP y sus respuestas)
    ip protocol udp udp dport 53 accept
    ip protocol tcp tcp dport 53 accept
    ip protocol udp udp sport 53 accept
    ip protocol tcp tcp sport 53 accept

    # 🕒 NTP (para sincronización horaria)
    udp dport 123 accept

    # 🌐 Interfaces de bridge internas
    iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept

    # 📡 Infra-cluster (DNS, NTP, CoreDNS, Web UI local)
    ip daddr 192.168.0.30 tcp dport { 80, 443, 8080, 8443 } accept
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 192.168.0.0/24 } ip daddr 192.168.0.30 accept

    # 🎯 Acceso a nodos críticos (API Kubernetes, balanceadores, Traefik)
    ip daddr 192.168.0.32 tcp dport 6443 accept
    ip daddr 192.168.0.33 tcp dport { 80, 443, 30807, 32389, 31541 } accept

    # 🔧 Puertos útiles para servicios (Traefik, NodePorts, Prometheus, etc.)
    tcp dport {
      22, 80, 443, 6443,
      8080, 8081, 8082, 8443,
      9090, 9091, 9093, 9100,
      3000,
      30807,
      30000-32767,
      32000-32767
    } accept

    # 🧩 Acceso a nodo worker3 desde redes internas
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 192.168.0.0/24 } ip daddr 10.17.4.26 tcp dport { 80, 443, 31541 } accept
    ip saddr 10.17.4.26 ip daddr { 10.17.3.0/24, 10.17.4.0/24, 192.168.0.0/24 } tcp sport { 80, 443, 31541 } accept
  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    # ✅ Conexiones establecidas
    ct state established,related accept

    # 🔄 Tráfico interno entre redes y nodos
    ip saddr 10.17.0.0/16 ip daddr 10.17.0.0/16 accept
    ip saddr 192.168.0.0/24 ip daddr 10.17.0.0/16 accept
    ip saddr 10.17.0.0/16 ip daddr 192.168.0.0/24 accept

    # 🎯 Tráfico entre workers y API Kubernetes (VIP)
    ip saddr { 10.17.3.0/24, 10.17.4.0/24 } ip daddr 192.168.0.32 tcp dport 6443 accept
    ip saddr 192.168.0.32 ip daddr { 10.17.3.0/24, 10.17.4.0/24 } tcp sport 6443 accept

    # 🌐 Tráfico hacia balanceadores/Traefik
    ip saddr { 10.17.3.0/24, 10.17.4.0/24 } ip daddr 192.168.0.33 tcp dport { 80, 443, 30807, 31541 } accept
    ip saddr 192.168.0.33 ip daddr { 10.17.3.0/24, 10.17.4.0/24 } tcp sport { 80, 443, 30807, 31541 } accept

    # 🔁 Bridge-to-bridge y bridge-to-Internet
    iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } oifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept
    oifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept

    # 🌍 Salida desde bridges hacia Internet (por NIC física)
    iifname { "br0", "virbr_kube02", "virbr_kube03" } oifname "enp3s0f0" accept
  }

  chain output {
    type filter hook output priority 0; policy accept;
  }
}

# =============================
# 🌐 NAT: Salida de Internet
# =============================

table inet nat {
  chain postrouting {
    type nat hook postrouting priority srcnat; policy accept;

    # NAT para salida de redes internas por la interfaz externa
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 192.168.0.0/24 } oifname "enp3s0f0" masquerade
  }
}

# =============================
# 🧪 LIBVIRT - Permitir todo
# =============================

#  Tabla para libvirt (sin cambios)
table ip libvirt_network {
  chain forward {
    counter accept
  }

  chain guest_input {
    counter accept
  }

  chain guest_output {
    counter accept
  }

  chain guest_cross {
    counter accept
  }

  chain guest_nat {
    counter accept
  }
}