#!/usr/sbin/nft -f

# Limpiar el conjunto de reglas actual
flush ruleset

# ---------------------- Tabla de filtrado ----------------------

table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;  # Política de seguridad: denegar todo por defecto

        # Log de tráfico entrante
        # Asegura que todo el tráfico entrante sea registrado antes de aceptar
        log prefix "nftables-input-log: " group 1 accept

        # Tráfico seguro
        ct state established,related accept  # Acepta conexiones establecidas y relacionadas
        iif "lo" accept  # Acepta tráfico local (loopback)
        ip protocol icmp accept  # Acepta tráfico ICMP (ping)

        # Tráfico explícito al host que gestiona el VIP (LoadBalancer)
        ip daddr 192.168.0.30 tcp dport { 80, 443, 8080, 8443 } accept  # Permite tráfico HTTP(S) hacia el host VIP

        # Puertos TCP globales permitidos en el HOST (enp3s0f0)
        tcp dport {
            22,      # SSH
            80, 443, # HTTP/HTTPS
            8080, 8443, # Aplicaciones web
            3389,    # RDP
            6443,    # Kubernetes API Server
            8081, 8082, 9090, 9091, 9093, 9100, 3000, # Puertos de aplicaciones/monitorización
            32000-32767 # Rango de NodePort de Kubernetes
        } accept

        # VIP explícito del API Server de Kubernetes (si el host lo tiene, ej. con keepalived)
        ip daddr 10.17.5.10 tcp dport 6443 accept

        # Puerto NTP (UDP)
        udp dport 123 accept

        # Tráfico desde bridges de libvirt y puente LAN
        iifname { "br0", "virbr0", "virbr_kube02", "virbr_kube03" } accept  # Permite tráfico entre el host y las VMs
    }

    chain forward {
        type filter hook forward priority 0; policy drop;  # Política de reenvío: denegar todo por defecto

        # Log de tráfico reenviado
        log prefix "nftables-forward-log: " group 1 accept

        # Sesiones existentes (para tráfico reenviado)
        ct state established,related accept  # Permite tráfico ya establecido

        # Comunicación interna del clúster (entre las subredes de K8s)
        ip saddr 10.17.0.0/16 ip daddr 10.17.0.0/16 accept  # Permite tráfico entre todas las subredes internas de K8s

        # Comunicación explícita entre las IPs solicitadas (10.17.5.10 y 10.17.5.30 en los puertos HTTP, HTTPS y SMB)
        ip saddr 10.17.5.10 ip daddr 10.17.5.30 tcp dport { 80, 445 } accept  # Acepta tráfico HTTP, HTTPS y SMB entre las IPs solicitadas

        # Bridges virtuales (Permite tráfico entre las VMs en diferentes bridges internos)
        iifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } oifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } accept
        oifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } iifname { "virbr0", "br0", "virbr_kube02", "virbr_kube03" } accept

        # Forward hacia el VIP del API Server (si es necesario desde otra red)
        ip daddr 10.17.5.10 tcp dport 6443 accept

        # Forward por interfaz física principal (Permite a las VMs salir a la LAN/Internet)
        iifname { "virbr_kube02", "virbr_kube03" } oifname "enp3s0f0" accept  # VMs de Kube a la LAN
        iifname "br0" oifname "enp3s0f0" accept  # VMs conectadas a br0 a la LAN
    }

    chain output {
        type filter hook output priority 0; policy accept;  # Permite todo el tráfico saliente del host
    }
}

# ---------------------- Tabla de NAT para acceso a Internet ----------------------

table inet nat {
    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        # Masquerade de salida para subredes del clúster y la red LAN
        ip saddr 10.17.3.0/24 oifname "enp3s0f0" masquerade  # Red 10.17.3.0/24 en el puente virbr_kube02
        ip saddr 10.17.4.0/24 oifname "enp3s0f0" masquerade  # Red 10.17.4.0/24 en el puente virbr_kube03
        ip saddr 192.168.0.0/24 oifname "enp3s0f0" masquerade  # Red LAN 192.168.0.0/24 a Internet
    }
}
