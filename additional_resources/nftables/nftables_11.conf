#!/usr/sbin/nft -f

# ============================== #
# üîÅ Limpiar reglas actuales
# ============================== #
flush ruleset

# ============================== #
# üîí Tabla de FILTRADO (inet)
# ============================== #
table inet filter {
  chain input {
    type filter hook input priority 0; policy drop;

    # ‚úÖ Logging (opcional)
    log prefix "nftables-input-log: " group 1 accept

    # ‚úÖ Tr√°fico permitido b√°sico
    ct state established,related accept
    iif "lo" accept
    ip protocol icmp accept

    # ‚úÖ Acceso directo al host f√≠sico (VIP en br0)
    ip daddr 192.168.0.30 tcp dport { 80, 443, 8080, 8443 } accept

    # ‚úÖ Acceso desde redes internas hacia el host
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 10.17.5.0/24 } ip daddr 192.168.0.30 accept

    # ‚úÖ Acceso desde bridges virtuales (incluye br-vip)
    iifname { "br0", "br-vip", "virbr0", "virbr_kube02", "virbr_kube03" } accept

    # ‚úÖ Acceso directo a los VIPs
    iifname { "br0", "br-vip" } ip daddr 10.17.5.10 tcp dport 6443 accept
    iifname { "br0", "br-vip" } ip daddr 10.17.5.30 tcp dport { 80, 443 } accept

    # ‚úÖ Puertos generales abiertos
    tcp dport {
      22, 80, 443, 8080, 8443,
      3389, 6443,
      8081, 8082, 9090, 9091, 9093, 9100,
      3000,
      32000-32767
    } accept

    # ‚úÖ NTP (hora)
    udp dport 123 accept
  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    log prefix "nftables-forward-log: " group 1 accept

    # ‚úÖ Conexiones existentes
    ct state established,related accept

    # ‚úÖ Comunicaci√≥n libre entre nodos/pods (todo 10.17.x.x)
    ip saddr 10.17.0.0/16 ip daddr 10.17.0.0/16 accept

    # ‚úÖ Tr√°fico hacia y desde VIP API
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 10.17.5.0/24 } ip daddr 10.17.5.10 tcp dport 6443 accept
    ip saddr 10.17.5.10 ip daddr { 10.17.3.0/24, 10.17.4.0/24 } tcp sport 6443 accept

    # ‚úÖ Tr√°fico hacia y desde VIP Ingress
    ip saddr { 10.17.3.0/24, 10.17.4.0/24, 10.17.5.0/24 } ip daddr 10.17.5.30 tcp dport { 80, 443 } accept
    ip saddr 10.17.5.30 ip daddr { 10.17.3.0/24, 10.17.4.0/24 } tcp sport { 80, 443 } accept

    # ‚úÖ Tr√°fico bidireccional entre bridges
    iifname { "br0", "br-vip", "virbr0", "virbr_kube02", "virbr_kube03" } oifname { "br0", "br-vip", "virbr0", "virbr_kube02", "virbr_kube03" } accept
    oifname { "br0", "br-vip", "virbr0", "virbr_kube02", "virbr_kube03" } iifname { "br0", "br-vip", "virbr0", "virbr_kube02", "virbr_kube03" } accept

    # ‚úÖ Salida de VMs a Internet
    iifname { "br0", "br-vip", "virbr_kube02", "virbr_kube03" } oifname "enp3s0f0" accept
  }

  chain output {
    type filter hook output priority 0; policy accept;
  }
}

# ============================== #
# üåê Tabla de NAT (salida a Internet)
# ============================== #
table inet nat {
  chain postrouting {
    type nat hook postrouting priority srcnat; policy accept;

    ip saddr 10.17.3.0/24 oifname "enp3s0f0" masquerade
    ip saddr 10.17.4.0/24 oifname "enp3s0f0" masquerade
    ip saddr 10.17.5.0/24 oifname "enp3s0f0" masquerade
    ip saddr 192.168.0.0/24 oifname "enp3s0f0" masquerade
  }
}

# ============================== #
# üß™ Tabla dummy para libvirt (sin hooks)
# ============================== #
table ip libvirt_network {
  chain forward {
    counter accept
  }

  chain guest_output {
    counter accept
  }
}